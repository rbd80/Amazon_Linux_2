---
###########################################################################
# INSTALLATION                                                            #
###########################################################################

# Add AtomiCorp yum repository
- name: Add repository
  yum_repository:
    name: AtomiCorp
    description: AtomiCorp yum repository
    baseurl: https://updates.atomicorp.com/installers/atomic


# Check for and install required compiler component
- name: ossec - install required compiler components (if necessary)
  apt: pkg=build-essential state=installed
  register: compiler
  when: installed.changed is defined and installed.changed
  tags: ossec

# Download ossec tarball if it doesn't already exist and ossec is not
# installed
- name: ossec - download ossec tarball
  get_url: url={{ ossec.url }}/{{ ossec.tarball }}
           dest={{ ossec.tmp_dir }}/{{ ossec.tarball }}
           mode=0600
  when: installed.changed is defined and installed.changed
  register: tarball
  tags: ossec

# Calculate the md5 checksum of the tarball
- name: ossec - calculate the md5 checksum of the tarball
  shell: /usr/bin/md5sum {{ ossec.tmp_dir }}/{{ ossec.tarball }}
  register: md5
  when: tarball.changed is defined and tarball.changed
  tags: ossec

# Verify the md5 checksum against the known value
- name: ossec - verify the md5 checksum of the tarball
  fail: msg="[WARNING] checksum {{ md5.stdout }} != {{ ossec.checksum }}"
  when: md5.stdout is defined and md5.stdout.split()[0] != ossec.checksum
  tags: ossec

# If we get this far, untar the tarball
- name: ossec - untar the tarball
  command: /bin/tar -xzf {{ ossec.tmp_dir }}/{{ ossec.tarball }}
           chdir={{ ossec.tmp_dir }}
           creates={{ ossec.tmp_dir }}/{{ ossec.untar_dir }}
  when: tarball.changed is defined and tarball.changed
  tags: ossec

# Populate the preloaded-vars.conf
- name: ossec - configure preloaded-vars.conf
  template: dest={{ ossec.tmp_dir }}/{{ ossec.untar_dir
            }}/etc/preloaded-vars.conf
            backup=yes
  first_available_file:
    - "{{ ansible_hostname }}_preloaded-vars.conf.j2"
    - preloaded-vars.conf.j2
  when: tarball.changed is defined and tarball.changed
  tags: ossec

# Create a system group
- name: ossec - create system group
  group: name=ossec state=present system=yes
  tags: ossec

# Create a system user
- name: ossec - create system user
  user: name=ossec group=ossec state=present home={{ ossec.install_dir
        }} createhome=no system=yes
  tags: ossec

# Build / Install the agent
- name: ossec - build/install the agent
  command: ./install.sh chdir={{ ossec.tmp_dir }}/{{ ossec.untar_dir }}
  when: (installed.changed is defined and installed.changed) or
        (tarball.changed is defined and tarball.changed)
  tags: ossec

###########################################################################
# CONFIGURATION                                                           #
###########################################################################

# Configure the agent ossec.conf (override per-host if needed)
- name: ossec - configure the agent (ossec.conf)
  template: dest={{ ossec.install_dir }}/etc/ossec.conf
            owner=root
            group=ossec
            mode=0440
            backup=yes
  first_available_file:
    - "{{ ansible_hostname }}_ossec.conf.j2"
    - ossec.conf.j2
  notify:
    - ossec - restart agent
  tags: ossec

# Configure the agent internal_options.conf (override per-host if
# needed)
- name: ossec - configure the agent (internal_options.conf)
  template: dest={{ ossec.install_dir }}/etc/internal_options.conf
            owner=root
            group=ossec
            mode=0440
            backup=yes
  first_available_file:
    - "{{ ansible_hostname }}_internal_options.conf.j2"
    - internal_options.conf.j2
  notify:
    - ossec - restart agent
  tags: ossec

# Patch the init.d script since it has a broken status setup
- name: ossec - configure the agent (init.d script)
  template: dest=/etc/init.d/ossec
            owner=root
            group=ossec
            mode=0755
  first_available_file:
    - "{{ ansible_hostname }}_ossec-init-script.j2"
    - ossec-init-script.j2
  tags: ossec

# Setup the client.keys file for the agent (NOTE: this requires the md5
# jinja filter to be available
- name: ossec - configure the agent key
  template: dest={{ ossec.install_dir }}/etc/client.keys
            owner=ossec
            group=ossec
            mode=0644
            backup=yes
  first_available_file:
    - "{{ ansible_hostname }}_client.keys.j2"
    - client.keys.j2
  register: client_key
  notify:
    - ossec - restart agent
  tags: ossec

# Ensure the services are started
- name: ossec - start ossec
  service: name=ossec state=started pattern=ossec
  tags: ossec

###########################################################################
# SERVER KEY SYNC                                                         #
###########################################################################

# Save the client key
- name: ossec - save client.keys to a variable
  shell: cat {{ ossec.install_dir }}/etc/client.keys
  when: client_key.changed
  register: server_key
  tags: ossec

# Store key on the server
- name: ossec - copy key to ossec.server
  template: dest={{ ossec.install_dir }}/etc/keys/{{ ansible_hostname }}
            owner=root
            group=root
            mode=0400
  first_available_file:
    - server.key.j2
  when: client_key.changed
  delegate_to: "{{ ossec.server }}"
  tags: ossec

# Remove the server's queue/rids file for a fresh start
- name: ossec - remove stale rids file
  file: path={{ ossec.install_dir }}/queue/rids/{{
        server_key.stdout.split()[0] }}
        state=absent
  when: client_key.changed
  notify: ossec - restart server
  delegate_to: "{{ ossec.server }}"
  tags: ossec

# Assemble the final full server keys file
- name: ossec - assemble server keys file from fragments
  assemble: src={{ ossec.install_dir }}/etc/keys
            dest={{ ossec.install_dir }}/etc/client.keys
            owner=ossec
            group=root
            mode=0644
            backup=yes
  delegate_to: "{{ ossec.server }}"
  notify: ossec - restart server
  tags: ossec

###########################################################################
# CLEANUP                                                                 #
###########################################################################

# Remove compiler components only if we added them initially
- name: ossec - remove compiler components (if necessary)
  apt: pkg=build-essential state=absent purge=yes
  when: compiler.changed
  tags: ossec

# Autoremove additional packages added if we added them initially
- name: ossec - autoremove additional components (if necessary)
  command: /usr/bin/apt-get -y --purge autoremove
  when: compiler.changed
  tags: ossec